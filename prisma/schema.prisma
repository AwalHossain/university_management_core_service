generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                   String             @id @default(uuid())
  studentId            String             @unique
  firstName            String
  lastName             String
  middleName           String
  profileImage         String
  email                String             @unique
  contactNo            String
  gender               String
  bloodGroup           String
  password             String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  academicSemesterId   String
  academicDepartmentId String
  academicFacultyId    String
  acdemicDepartment    AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])

  @@map("students")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  AcademicDepartments AcademicDepartment[]
  faculties           Faculty[]
  students            Student[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  faculties         Faculty[]
  students          Student[]

  @@map("academic_departments")
}

model AcademicSemester {
  id         String    @id @default(uuid())
  year       Int
  title      String
  code       String
  startMonth String
  endMonth   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  students   Student[]
}

model Faculty {
  id                   String             @id @default(uuid())
  facultyId            String             @unique
  firstName            String
  lastName             String
  middleName           String
  profileImage         String
  email                String             @unique
  contactNo            String
  gender               String
  bloodGroup           String
  designation          String
  password             String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  academicFacultyId    String
  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  courses      CourseToFaculty[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String

  @@map("rooms")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  preRequisite    CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  faculties CourseToFaculty[]
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String
  course         Course @relation("CourseToPrerequisite", fields: [courseId], references: [id])
  prerequisite   Course @relation("PrerequisiteToCourse", fields: [preRequisiteId], references: [id])

  @@id([courseId, preRequisiteId])
}

model CourseToFaculty {
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_to_faculty")
}
