generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                                 String                              @id @default(uuid())
  studentId                          String                              @unique
  firstName                          String
  lastName                           String
  middleName                         String
  profileImage                       String
  email                              String                              @unique
  contactNo                          String
  gender                             String
  bloodGroup                         String
  password                           String
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  academicSemesterId                 String
  academicDepartmentId               String
  academicFacultyId                  String
  acdemicDepartment                  AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty                    AcademicFaculty                     @relation(fields: [academicFacultyId], references: [id])
  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  studenEnrolledCourses              StudenEnrolledCourse[]
  studentSemesterPayments             StudentSemesterPayment[]

  @@map("students")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  AcademicDepartments AcademicDepartment[]
  faculties           Faculty[]
  students            Student[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  faculties         Faculty[]
  students          Student[]
  offeredCourse     OfferedCourse[]

  @@map("academic_departments")
}

model AcademicSemester {
  id                     String                   @id @default(uuid())
  year                   Int
  title                  String
  code                   String
  isCurrent              Boolean?                 @default(false)
  startMonth             String
  endMonth               String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  students               Student[]
  semesterRegistrations  SemesterRegistration[]
  studenEnrolledCourses  StudenEnrolledCourse[]
  studentSemesterPayments StudentSemesterPayment[]
}

model Faculty {
  id                          String                       @id @default(uuid())
  facultyId                   String                       @unique
  firstName                   String
  lastName                    String
  middleName                  String
  profileImage                String
  email                       String                       @unique
  contactNo                   String
  gender                      String
  bloodGroup                  String
  designation                 String
  password                    String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  academicFacultyId           String
  academicDepartmentId        String
  academicDepartment          AcademicDepartment           @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  courses                     CourseToFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id                          String                       @id @default(uuid())
  roomNumber                  String
  floor                       String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  building                    Building                     @relation(fields: [buildingId], references: [id])
  buildingId                  String
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id                    String                 @id @default(uuid())
  title                 String
  code                  String
  credits               Int                    @default(0)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  preRequisite          CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor       CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  faculties             CourseToFaculty[]
  offeredCourses        OfferedCourse[]
  studenEnrolledCourses StudenEnrolledCourse[]
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String
  course         Course @relation("CourseToPrerequisite", fields: [courseId], references: [id])
  prerequisite   Course @relation("PrerequisiteToCourse", fields: [preRequisiteId], references: [id])

  @@id([courseId, preRequisiteId])
}

model CourseToFaculty {
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_to_faculty")
}

model SemesterRegistration {
  id                                String                              @id @default(uuid())
  startDate                         DateTime
  endDate                           DateTime
  status                            SemesterRegistrationStatus?         @default(UPCOMING)
  minCredit                         Int                                 @default(0)
  maxCredit                         Int                                 @default(0)
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
  academicSemesterId                String
  academicSemester                  AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  offeredCourses                    OfferedCourse[]
  offeredCourseSections             OfferedCourseSection[]
  studentSemesterRegistrations      StudentSemesterRegistration[]
  offeredCourseClassSchedules       OfferedCourseClassSchedule[]
  StudentSemesterRegistrationCourse StudentSemesterRegistrationCourse[]

  @@map("semester_registrations")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

model OfferedCourse {
  id                     String   @id @default(uuid())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  academicDepartmentId   String
  semesterRegistrationId String
  courseId               String

  academicDepartment                 AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  course                             Course                              @relation(fields: [courseId], references: [id])
  offeredCourseSections              OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offeredCourseId                    String
  offeredCourse                      OfferedCourse                       @relation(fields: [offeredCourseId], references: [id])
  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_course_sections")
}

model OfferedCourseClassSchedule {
  id        String      @id @default(uuid())
  dayOfWeek DAY_OF_WEEK @default(SATURDAY)
  startTime String
  endTime   String

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedules")
}

enum DAY_OF_WEEK {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model StudentSemesterRegistration {
  id          String   @id @default(uuid())
  isConfirmed Boolean? @default(false)
  totalCredit Int?     @default(0)

  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  studentId              String
  semesterRegistrationId String
  student                Student              @relation(fields: [studentId], references: [id])
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registrations")
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  offeredCourseId        String
  offeredCourse          OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId])
  @@map("student_semester_registration_courses")
}

model StudenEnrolledCourse {
  id                 String           @id @default(uuid())
  studentId          String
  student            Student          @relation(fields: [studentId], references: [id])
  courseId           String
  course             Course           @relation(fields: [courseId], references: [id])
  academicSemesterId String
  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])

  grade      String?
  point      Int?                         @default(0)
  totalMarks Int?                         @default(0)
  status     StudentEnrolledCourseStatus? @default(ONGOING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_enrolled_courses")
}

enum StudentEnrolledCourseStatus {
  ONGOING
  COMPLETED
  FAILED
}

model StudentSemesterPayment {
  id String @id @default(uuid())

  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  studentId            String
  student              Student               @relation(fields: [studentId], references: [id])
  academicSemesterId   String
  academicSemester     AcademicSemester      @relation(fields: [academicSemesterId], references: [id])
  fullPaymentAmount    Int?                  @default(0)
  partialPaymentAmount Int?                  @default(0)
  tatalPaidAmount      Int?                  @default(0)
  totalDueAmount       Int?                  @default(0)
  paymentStatus        StudentPaymentStatus? @default(PENDING)

  @@map("student_semester_payments")
}

enum StudentPaymentStatus {
  PENDING
  PSRTIAL_PAID
  FULL_PAID
}
